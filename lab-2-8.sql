USE sakila;

-- 1 List the number of films per category.
SELECT * FROM sakila.film_category;   #calculate number of film_id and retrieve category_id
SELECT * FROM sakila.category;        #link between category_id and category_name

SELECT c.name AS category, count(fc.film_id) AS number_of_films
FROM sakila.category AS c
JOIN sakila.film_category AS fc
USING (category_id)
GROUP BY category
ORDER BY number_of_films DESC;


-- 2 Retrieve the store ID, city, and country for each store:
SELECT * FROM sakila.store;           #retrieve store_id and address_id
SELECT * FROM sakila.address;         #link between address_id, address and city_id
SELECT * FROM sakila.city;            #link between city_id, city and country_id
SELECT * FROM sakila.country;         #retrieve country from country_id

SELECT s.store_id, ci.city, co.country
FROM sakila.store AS s 
JOIN sakila.address AS a ON s.address_id = a.address_id
JOIN sakila.city AS ci ON a.city_id = ci.city_id
JOIN sakila.country AS co ON ci.country_id = co.country_id;


-- 3 Calculate the total revenue generated by each store in dollars:
SELECT * FROM sakila.payment;       #calculate total amount and staff_id
SELECT * FROM sakila.staff;         #link between staff_id and store_id

SELECT sta.store_id, 
CASE
WHEN store_id = 1 THEN round(sum(p.amount)*0.73)    #conversion from canadian dollars to american
WHEN store_id = 2 THEN round(sum(p.amount)* 0.65)   #conversion from australian dollars to american
END AS total_revenue
FROM sakila.staff AS sta
JOIN sakila.payment AS p ON sta.staff_id = p.staff_id
GROUP BY sta.store_id
ORDER BY total_revenue DESC;


-- 4 Determine the average running time of films for each category:
SELECT * FROM sakila.film;               #calculate average running time and film_id
SELECT * FROM sakila.film_category;      #link between film_id and category_id
SELECT * FROM sakila.category;           #link between category_id and category_name

SELECT c.name AS category, round(avg(f.length),2) AS average_running_time
FROM sakila.category AS c 
JOIN sakila.film_category AS fc ON c.category_id = fc.category_id 
JOIN sakila.film AS f ON fc.film_id = f.film_id
GROUP BY category
ORDER BY average_running_time DESC;


-- BONUS

-- 5 Identify the film categories with the longest average running time:
SELECT * FROM sakila.film;               #calculate average running time and film_id
SELECT * FROM sakila.film_category;      #link between film_id and category_id
SELECT * FROM sakila.category;           #link between category_id and category_name

SELECT c.name AS category, round(avg(f.length),2) AS average_running_time
FROM sakila.category AS c 
JOIN sakila.film_category AS fc ON c.category_id = fc.category_id 
JOIN sakila.film AS f ON fc.film_id = f.film_id
GROUP BY category
ORDER BY average_running_time DESC
LIMIT 5;
-- returns TOP 5 film categories with the longest running time


-- 6 Display the top 10 most frequently rented movies in descending order:
SELECT * from sakila.film;               #retrieve film titles
SELECT * from sakila.inventory;          #link between inventory_id and film_id
SELECT * FROM sakila.rental;             #link between inventory_id and rental_id

SELECT f.title, count(r.rental_id) AS rental_frequency
FROM sakila.film AS f
JOIN sakila.inventory AS i ON i.film_id = f.film_id
JOIN sakila.rental AS r ON r.inventory_id = i.inventory_id
GROUP BY f.title
ORDER BY count(r.rental_id) DESC;


-- 7 Determine if "Academy Dinosaur" can be rented from Store 1:
SELECT * FROM sakila.film;                  #retrieve and specify film title, contains film_id
SELECT * FROM sakila.inventory;             #retrieve number of copies in inventory and store_id

SELECT f.title, i.store_id, count(inventory_id) AS number_of_copies
FROM sakila.film AS f
JOIN sakila.inventory AS i ON f.film_id = i.film_id
WHERE f.title = 'ACADEMY DINOSAUR'
AND i.store_id = '1';
-- Store 1 possesses 4 copies of this film


-- 8 Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

SELECT f.title, count(i.inventory_id) AS inventory_status,
CASE 
WHEN i.inventory_id IS NULL THEN 'Not Available' 
ELSE 'Available'
END AS availability
FROM sakila.film AS f
LEFT JOIN sakila.inventory AS i ON f.film_id = i.film_id
GROUP BY f.title, availability
ORDER BY f.title ASC;



